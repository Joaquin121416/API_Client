/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.client.api;

import com.nttdata.client.model.Client;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-27T10:19:11.588399700-05:00[America/Lima]")
@Validated
@Tag(name = "com/nttdata/client", description = "Endpoint makes customer information available")
public interface ClientApi {

    default ClientApiDelegate getDelegate() {
        return new ClientApiDelegate() {};
    }

    /**
     * POST /client : Add a new client
     * Add a new client
     *
     * @param client Create a new client (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addClient",
        summary = "Add a new client",
        description = "Add a new client",
        tags = {"com/nttdata/client"},
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Client.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/com/nttdata/client",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default Mono<ResponseEntity<Client>> addClient(
        @Parameter(name = "Client", description = "Create a new client", required = true) @Valid @RequestBody Mono<Client> client,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().addClient(client, exchange);
    }


    /**
     * DELETE /client/{clientId} : Deletes a client
     * delete a client
     *
     * @param clientId Client id to delete (required)
     * @param apiKey  (optional)
     * @return Invalid client value (status code 400)
     */
    @Operation(
        operationId = "deleteClient",
        summary = "Deletes a client",
        description = "delete a client",
        tags = {"com/nttdata/client"},
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid client value")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/com/nttdata/client/{clientId}"
    )
    default Mono<ResponseEntity<Void>> deleteClient(
        @Parameter(name = "clientId", description = "Client id to delete", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Long clientId,
        @Parameter(name = "api_key", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "api_key", required = false) String apiKey,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().deleteClient(clientId, apiKey, exchange);
    }


    /**
     * GET /client/findByStatus : Finds client by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (optional, default to active)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
        operationId = "findClientByStatus",
        summary = "Finds client by status",
        description = "Multiple status values can be provided with comma separated strings",
        tags = {"com/nttdata/client"},
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Client.class))),
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Client.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/com/nttdata/client/findByStatus",
        produces = { "application/json", "application/xml" }
    )
    default Mono<ResponseEntity<Flux<Client>>> findClientByStatus(
        @Parameter(name = "status", description = "Status values that need to be considered for filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false, defaultValue = "active") String status,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().findClientByStatus(status, exchange);
    }


    /**
     * GET /client/findByTags : Finds client by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @param tags Tags to filter by (optional)
     * @return successful operation (status code 200)
     *         or Invalid tag value (status code 400)
     */
    @Operation(
        operationId = "findClientByTags",
        summary = "Finds client by tags",
        description = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        tags = {"com/nttdata/client"},
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Client.class))),
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Client.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid tag value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/com/nttdata/client/findByTags",
        produces = { "application/json", "application/xml" }
    )
    default Mono<ResponseEntity<Flux<Client>>> findClientByTags(
        @Parameter(name = "tags", description = "Tags to filter by", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tags", required = false) List<String> tags,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().findClientByTags(tags, exchange);
    }


    /**
     * GET /client/{clientId} : Find client by ID
     * Returns a single client
     *
     * @param clientId ID of client to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Client not found (status code 404)
     */
    @Operation(
        operationId = "getClientById",
        summary = "Find client by ID",
        description = "Returns a single client",
        tags = {"com/nttdata/client"},
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Client.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Client not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/com/nttdata/client/{clientId}",
        produces = { "application/json", "application/xml" }
    )
    default Mono<ResponseEntity<Client>> getClientById(
        @Parameter(name = "clientId", description = "ID of client to return", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Long clientId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getClientById(clientId, exchange);
    }


    /**
     * PUT /client : Update an existing client
     * Update an existing client by Id
     *
     * @param client Update an existent client (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Client not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateClient",
        summary = "Update an existing client",
        description = "Update an existing client by Id",
        tags = {"com/nttdata/client"},
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Client.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Client not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/com/nttdata/client",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default Mono<ResponseEntity<Client>> updateClient(
        @Parameter(name = "Client", description = "Update an existent client", required = true) @Valid @RequestBody Mono<Client> client,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().updateClient(client, exchange);
    }


    /**
     * POST /client/{clientId} : Updates a client with form data
     * 
     *
     * @param clientId ID of client that needs to be updated (required)
     * @param name Name of client that needs to be updated (optional)
     * @param status Status of client that needs to be updated (optional)
     * @return Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateClientWithForm",
        summary = "Updates a client with form data",
        description = "",
        tags = {"com/nttdata/client"},
        responses = {
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/com/nttdata/client/{clientId}"
    )
    default Mono<ResponseEntity<Void>> updateClientWithForm(
        @Parameter(name = "clientId", description = "ID of client that needs to be updated", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Long clientId,
        @Parameter(name = "name", description = "Name of client that needs to be updated", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "status", description = "Status of client that needs to be updated", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) String status,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().updateClientWithForm(clientId, name, status, exchange);
    }

}
